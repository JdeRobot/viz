# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `motors.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Motors' not in _M_jderobot.__dict__:
    _M_jderobot.Motors = Ice.createTempClass()
    class Motors(Ice.Object):
        """
        Interface to the Gazebo Motors Actuators interaction.
        """
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.Motors:
                raise RuntimeError('jderobot.Motors is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Motors')

        def ice_id(self, current=None):
            return '::jderobot::Motors'

        def ice_staticId():
            return '::jderobot::Motors'
        ice_staticId = staticmethod(ice_staticId)

        def getV(self, current=None):
            pass

        def setV(self, v, current=None):
            pass

        def getW(self, current=None):
            pass

        def setW(self, w, current=None):
            pass

        def getL(self, current=None):
            pass

        def setL(self, l, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Motors)

        __repr__ = __str__

    _M_jderobot.MotorsPrx = Ice.createTempClass()
    class MotorsPrx(Ice.ObjectPrx):

        def getV(self, _ctx=None):
            return _M_jderobot.Motors._op_getV.invoke(self, ((), _ctx))

        def begin_getV(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getV.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getV(self, _r):
            return _M_jderobot.Motors._op_getV.end(self, _r)

        def setV(self, v, _ctx=None):
            return _M_jderobot.Motors._op_setV.invoke(self, ((v, ), _ctx))

        def begin_setV(self, v, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setV.begin(self, ((v, ), _response, _ex, _sent, _ctx))

        def end_setV(self, _r):
            return _M_jderobot.Motors._op_setV.end(self, _r)

        def getW(self, _ctx=None):
            return _M_jderobot.Motors._op_getW.invoke(self, ((), _ctx))

        def begin_getW(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getW.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getW(self, _r):
            return _M_jderobot.Motors._op_getW.end(self, _r)

        def setW(self, w, _ctx=None):
            return _M_jderobot.Motors._op_setW.invoke(self, ((w, ), _ctx))

        def begin_setW(self, w, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setW.begin(self, ((w, ), _response, _ex, _sent, _ctx))

        def end_setW(self, _r):
            return _M_jderobot.Motors._op_setW.end(self, _r)

        def getL(self, _ctx=None):
            return _M_jderobot.Motors._op_getL.invoke(self, ((), _ctx))

        def begin_getL(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getL.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getL(self, _r):
            return _M_jderobot.Motors._op_getL.end(self, _r)

        def setL(self, l, _ctx=None):
            return _M_jderobot.Motors._op_setL.invoke(self, ((l, ), _ctx))

        def begin_setL(self, l, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setL.begin(self, ((l, ), _response, _ex, _sent, _ctx))

        def end_setL(self, _r):
            return _M_jderobot.Motors._op_setL.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.MotorsPrx.ice_checkedCast(proxy, '::jderobot::Motors', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.MotorsPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::Motors'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_MotorsPrx = IcePy.defineProxy('::jderobot::Motors', MotorsPrx)

    _M_jderobot._t_Motors = IcePy.defineClass('::jderobot::Motors', Motors, -1, (), True, False, None, (), ())
    Motors._ice_type = _M_jderobot._t_Motors

    Motors._op_getV = IcePy.Operation('getV', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setV = IcePy.Operation('setV', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Motors._op_getW = IcePy.Operation('getW', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setW = IcePy.Operation('setW', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Motors._op_getL = IcePy.Operation('getL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setL = IcePy.Operation('setL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.Motors = Motors
    del Motors

    _M_jderobot.MotorsPrx = MotorsPrx
    del MotorsPrx

if 'SetterMotors' not in _M_jderobot.__dict__:
    _M_jderobot.SetterMotors = Ice.createTempClass()
    class SetterMotors(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.SetterMotors:
                raise RuntimeError('jderobot.SetterMotors is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::SetterMotors')

        def ice_id(self, current=None):
            return '::jderobot::SetterMotors'

        def ice_staticId():
            return '::jderobot::SetterMotors'
        ice_staticId = staticmethod(ice_staticId)

        def setMotors(self, proxy, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_SetterMotors)

        __repr__ = __str__

    _M_jderobot.SetterMotorsPrx = Ice.createTempClass()
    class SetterMotorsPrx(Ice.ObjectPrx):

        def setMotors(self, proxy, _ctx=None):
            return _M_jderobot.SetterMotors._op_setMotors.invoke(self, ((proxy, ), _ctx))

        def begin_setMotors(self, proxy, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.SetterMotors._op_setMotors.begin(self, ((proxy, ), _response, _ex, _sent, _ctx))

        def end_setMotors(self, _r):
            return _M_jderobot.SetterMotors._op_setMotors.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.SetterMotorsPrx.ice_checkedCast(proxy, '::jderobot::SetterMotors', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.SetterMotorsPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::SetterMotors'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_SetterMotorsPrx = IcePy.defineProxy('::jderobot::SetterMotors', SetterMotorsPrx)

    _M_jderobot._t_SetterMotors = IcePy.defineClass('::jderobot::SetterMotors', SetterMotors, -1, (), True, False, None, (), ())
    SetterMotors._ice_type = _M_jderobot._t_SetterMotors

    SetterMotors._op_setMotors = IcePy.Operation('setMotors', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_jderobot._t_MotorsPrx, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.SetterMotors = SetterMotors
    del SetterMotors

    _M_jderobot.SetterMotorsPrx = SetterMotorsPrx
    del SetterMotorsPrx

# End of module jderobot
